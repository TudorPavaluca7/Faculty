Language Specification:
 1 .Language Definition:
  1.1 Alphabet:
  1.1.a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
      b. Underline character _;
      c. Decimal digits (0-9);
  Lexic:
      a.Special symbols, representing:
         - operators + - * / := < <= = >= == != ++ -- ! && ||
         - separators [ ] { } ; space ,  
         - reserved words:
           array  char else if int float read while write bool return string
      b.identifiers
        -a sequence of letters and  digits, such that the first charater is a letter; the rule is:
        <identifier> ::= <letter> | <letter><identifierbuilder>

        <identifierbuilder> ::= <letter> | <letter><identifierbuilder> | <digit> | <digit><identifierbuilder>
        <letter> ::= A | B | . ..| Z | a | b | ... | z
	<digit> ::= 0 | 1 |...| 9
        <nonzero> ::= 1 |...| 9

      c.constants
	 1.integer - rule:
	      <nrconst> ::= +<nr> | -<nr> | <nr>
              <nr> ::= <nonzero> | <nonzero><nb>
	      <nb> ::= <digit> | <digit><nb>
         
         float - rule:
         <realconst> ::= +<nr> | +<nr>.<nr> | -<nr> | -<nr>.<nr> | <nr>.<nr>
         
         boolean - rule:
         <booleanconst> ::= true | false
	 
         2.character
	     <char> ::= '<letter>'|'<digit>'| ''
	 3.string
	      <string> ::= "<stringbuilder>"
	      <stringbuilder>:=<char> | <char><stringbuilder>
  2.2 Syntax:
 
   The words - predefined tokens are specified between " and ": 
   a) Sintactical rules:
    <program> ::= VAR <decllist> ; <cmpdstmt> .
   <decllist> ::= <declaration | <declaration> ; <decllist>
<declaration> ::= <type> " " <identifier>
      <type1> ::= boolean | char | integer | float | string
  <arraydecl> ::= <type1> <IDENTIFIER> "[" nr "]"
      <type>  ::= <type1>|<arraydecl>
   <cmpdstmt> ::= {<stmtlist>}
   <stmtlist> ::= <stmt> | <stmt> ";" <stmtlist>
       <stmt> ::= <simplstmt> | <structstmt>
  <simplstmt> ::= <assignstmt> | <iostmt>
 <assignstmt> ::= <IDENTIFIER> "=" <expression>
 <expression> ::= <expression> + <term> | <expression> - <term> | <term>
       <term> ::= <term> * <factor> | <term> / <factor> | <factor>
     <factor> ::= ( <expression> ) | <IDENTIFIER> | <int> | <float>  
     <iostmt> ::= READ( <IDENTIFIER> ) | WRITE( <expression> )
 <structstmt> ::= <cmpdstmt> | <ifstmt> | <whilestmt>
     <ifstmt> ::= IF (<condition>) <cmpdstmt> | IF (<condition>) <cmpdstmt> ELSE <cmpdstmt>
  <whilestmt> ::= WHILE (<condition>) <cmpdstmt>
  <condition> ::= <expression> <RELATION> <expression>
   
   b) lexical rules:
     <identifier> ::= <letter> | <letter><word>
     <word> ::= <letter> | <letter><word> | <digit> | <digit><word>
     <letter> ::= A | B | . ..| Z | a | b | ... | z
     <digit> ::= 0 | 1 |...| 9
     <nonzero> ::= 1 |...| 9
     <RELATION> = "<" | "<=" | "==" | "!=" | ">=" | ">"

 The tokens are codified according to the following table:
- identifiers	- code 0
- constants	- code  1
- reserved words: each word has its own code
- operators: each operator has its own code
- separators: each separator has its own code
Codification:
      Token type  code
      identifier     0 
      constant       1 
      array          2
      char           3  
      const          4 
      else           5 
      if             6 
      int            7 
      float          8 
      read           9 
      write          10 
      while          11 
      ;              12 
      ,              13 
      +              14 
      -              15 
      *              16
      /              17
      ++             18
      --             19   
      (              20 
      )              21 
      [              22 
      ]              23 
      <              24 
      >              25 
      =              26 
      <=             27
      >=             28
      {              29
      }              30
      ==             31
      return         32
      !              33
      array          34  
      bool           35 
      string         36
      !=             37
      &&             38
      ||             39       
      var            40
    	       
